/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_tokens.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dzuiev <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/04/26 08:48:04 by dzuiev            #+#    #+#             */
/*   Updated: 2024/04/26 08:48:04 by dzuiev           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"
#ifndef BONUS

void	expand_tokens(t_env **env)
{
	t_token	*token;
	t_token	*prev;
	char	*expanded;

	prev = NULL;
	token = (*env)->tokens;
	while (token)
	{
		if (token->type == TOKEN_WORD)
		{
			{
				expanded = expand_word(env, &token->value);
				free(token->value);
				token->value = expanded;
			}
		}
		prev = token;
		token = token->next;
	}
}

int	handle_meta(t_env **env, char **input)
{
	char	*current;

	current = *input;
	if (*current == '<')
		handle_less_than_sign(env, &current);
	else if (*current == '>')
		handle_greater_than_sign(env, &current);
	else if (*current == '|')
		if (current[1] == '|')
			return (1);
		else
			handle_pipe_or(env, &current);
	else if (*current == '&')
		return (1);
	else if (*current == ';')
		return (1);
	else if (*current == '(')
		return (1);
	else if (*current == ')')
		return (1);
	else if (*current == '*')
		return (1);
	*input = current;
	return (0);
}

#endif
